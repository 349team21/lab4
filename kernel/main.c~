/** @file main.c
 *
 * @brief kernel main
 *
 * @author 
 *	   
 *	   
 * @date   
 */
 
#include <kernel.h>
#include <task.h>
#include <sched.h>
#include <device.h>
#include <assert.h>
#include <arm/timer.h>
#include <arm/reg.h>
#include <arm/interrupt.h>
#include <bits/swi.h>
#include <lock.h>

#define SWI_VECTOR_ADDR 0x00000008
#define IRQ_VECTOR_ADDR 0x00000018
#define PC_OFFSET       8
#define LDR_PC_BASE		0xe51ff000 /* ldr pc, [pc, #imm12] */
#define LDR_U_FLAG   	0x00800000
#define LDR_IMM_MASK 	0x00000fff
#define LDR_PC_NEXT  	0xe51ff004 /* ldr pc, [pc, #-4] */

//Global Variables
uint32_t global_data;
unsigned int* uboot_swi_addr;
unsigned int* uboot_swi;
unsigned int* uboot_irq;
unsigned int* uboot_irq_addr;

extern void handleSWI(void);
extern void handleIRQ(void);
extern int toUSER(int argc, char* argv[]);
extern ssize_t read_syscall(int fd, void* buf, size_t count);
extern ssize_t write_syscall(int fd, const void* buf, size_t count);

int kmain(int argc __attribute__((unused)), char** argv  __attribute__((unused)), uint32_t table)
{

	app_startup();
	global_data = table;
	/* add your code up to assert statement */
	
	unsigned long* old_swi_handler;
	unsigned long* old_irq_handler;
	
	unsigned long swi_vector = *(unsigned long *)SWI_VECTOR_ADDR;
	unsigned long irq_vector = *(unsigned long *)IRQ_VECTOR_ADDR;
	long swi_offset;
	long irq_offset;
	
	
	
	// install_swi_handler
	/* Check if the SWI/IRQ vector addr contains a "ldr pc, [pc, #imm12] instruction. */
	if ((swi_vector & ~(LDR_U_FLAG | LDR_IMM_MASK)) != LDR_PC_BASE)
	{
		printf("Kernel panic: unrecognized vector: %08lx\n", swi_vector);
		return 0x0badc0de;
	}

	/* Determine the literal offset. */
	if (swi_vector & LDR_U_FLAG) {
		swi_offset = swi_vector & LDR_IMM_MASK;
	}
	else {
		swi_offset = -(swi_vector & LDR_IMM_MASK);
	}

	/* Find the location of U-Boot's SWI/IRQ handler. */
	old_swi_handler = *(unsigned long **)(SWI_VECTOR_ADDR + PC_OFFSET + swi_offset);

	/* Redirect U-Boot's SWI handler to ours. */
	*(old_swi_handler  ) = LDR_PC_NEXT;
	*(old_swi_handler + 1) = (unsigned long) &handleSWI;
	
	
	
	
	// install_irq_handler
	/* Check if the SWI/IRQ vector addr contains a "ldr pc, [pc, #imm12] instruction. */
	if ((irq_vector & ~(LDR_U_FLAG | LDR_IMM_MASK)) != LDR_PC_BASE)
	{
		printf("Kernel panic: unrecognized vector: %08lx\n", irq_vector);
		return 0x0badc0de;
	}

	/* Determine the literal offset. */
	if (irq_vector & LDR_U_FLAG) {
		irq_offset = irq_vector & LDR_IMM_MASK;
	}
	else {
		irq_offset = -(irq_vector & LDR_IMM_MASK);
	}

	/* Find the location of U-Boot's SWI/IRQ handler. */
	old_irq_handler = *(unsigned long **)(IRQ_VECTOR_ADDR + PC_OFFSET + irq_offset);

	/* Redirect U-Boot's IRQ handler to ours. */
	*(old_irq_handler  ) = LDR_PC_NEXT;
	*(old_irq_handler+1) = (unsigned long) &handleIRQ;

	//initialize timers
	time_init();
	
	// Initialize mutexes
	mutex_init();

	printf("MAKING USER SWITCH\n");
	toUSER(argc, argv);
	
	assert(0);        /* should never get here */
	printf("How do you get here?!!!\n");
	return 42;
}

/*
 * swi dispatcher takes two parameters: swi number and a pointer to the 
 * corresponding argument 
 */ 
int my_swi_dispatcher(int swi_number, int* args_ptr)
{
	// return value
	int result = 0;
	
	switch (swi_number)

	{
			
		case READ_SWI:
			// read takes three parameters: int fd, void* buf, size_t count
			result = (int) read_syscall((int)args_ptr[0], (void *)args_ptr[1], (size_t)args_ptr[2]);
			break;
			
		case WRITE_SWI:
			// write takes three parameters: int fd, void* buf, size_t count
			result = (int) write_syscall((int)args_ptr[0], (void *)args_ptr[1], (size_t)args_ptr[2]);
			break;

	}
	return result;
}





