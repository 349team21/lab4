/** @file ub_test.c
 * 
 * @brief The UB Test for basic schedulability
 *
 * @author Kartik Subramanian <ksubrama@andrew.cmu.edu>
 * @date 2008-11-20
 */

#define DEBUG 0
#define P_CONSTANT (1000000)

#include <sched.h>
#ifdef DEBUG
#include <exports.h>
#endif

void bubble_sort(task_t tasks[], size_t array_size);
long unsigned rhs_calc(unsigned int k);
 
/**
 * @brief Perform UB Test and reorder the task list.
 *
 * The task list at the end of this method will be sorted in order is priority
 * -- from highest priority (lowest priority number) to lowest priority
 * (highest priority number).
 *
 * @param tasks  An array of task pointers containing the task set to schedule.
 * @param num_tasks  The number of tasks in the array.
 *
 * @return 0  The test failed.
 * @return 1  Test succeeded.  The tasks are now in order.
 */
int assign_schedule(task_t** tasks  __attribute__((unused)), size_t num_tasks  __attribute__((unused)))
{
	long unsigned summation = 0;
	long unsigned current = 0;
	task_t curTask;
	int i;

	bubble_sort(*tasks, num_tasks);

	for(i = 1; i < (int) num_tasks + 1; i++){	
		curTask = (*tasks)[i];	
		summation +=  (curTask.C * P_CONSTANT) / curTask.T;
		current = (curTask.B * P_CONSTANT) / curTask.T;
		//printf("%i: C:%lu T:%lu B:%lu summation:%lu current:%lu rhs_calc:%lu\n", i, curTask->C, curTask->T, curTask->B, summation, current, rhs_calc(i+1));

		if( (summation + current ) > rhs_calc(i+1) )
			return 0;
	}

	return 1;

}

void bubble_sort(task_t tasks[], size_t array_size)
{
	int i, j;
	task_t temp;
 
	for (i = (array_size-1); i>=0; i--){
		for (j = 0; j <= i; j++){
			if (tasks[j-1].T > tasks[j].T){
				temp = tasks[j-1];
				tasks[j-1] = tasks[j];
				tasks[j] = temp;
			}
		}
	}
}

static long unsigned lookup_table[] =
{

1000000, 828427, 779763, 756828, 743491,
734772, 728626, 724061, 720537, 717734,
715451, 713557, 711958, 710592, 709411,
708380, 707472, 706666, 705945, 705298,
704713, 704182, 703697, 703253, 702845,
702469, 702121, 701797, 701497, 701216,
700954, 700708, 700478, 700260, 700056,
699863, 699680, 699507, 699343, 699187,
699039, 698898, 698763, 698635, 698513,
698395, 698283, 698176, 698072, 697973,
697878, 697787, 697699, 697614, 697533,
697454, 697378, 697305, 697234, 697166,
697100, 697036, 696974, 696914
};

long unsigned rhs_calc(unsigned int k) {

        if (k == 0) return 1.0;
        if (k > 64) return lookup_table[63];
        else {
                return lookup_table[k];
        }

}
	


